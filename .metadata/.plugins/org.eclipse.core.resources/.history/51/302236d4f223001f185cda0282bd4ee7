package org.testing.testScripts;

import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Scanner;

import org.testing.resources.JsonHandle;
import org.testing.testBase.BaseTest;
import org.testing.testSteps.HTTPMethods;
import org.testing.utilities.JsonParsing;
import org.testing.utilities.JsonReplacement;
import org.testing.utilities.Log;
import org.testng.Assert;
import org.testng.annotations.Test;

import io.restassured.response.Response;

public class TC3_ReqResPostUsingUserInput extends BaseTest {

    public static String returnIdValue;

    @Test
    public void createUserByInputTest() throws Exception {
Log.info("Test Case: TC3_ReqResPostUsingUserInput started");
        
        // Print the current working directory to debug the path issue
        System.out.println("Current working directory: " + System.getProperty("user.dir"));
        Log.info("Current working directory: " + System.getProperty("user.dir"));

        // Define the path to the JSON file
        String jsonFilePath = "../RestAssuredBookStore/requestBody.json";
        Path filePath = Paths.get(jsonFilePath);
        
        // Ensure the file exists before attempting to read it
        if (!Files.exists(filePath)) {
            throw new java.nio.file.NoSuchFileException("File not found: " + filePath.toAbsolutePath());
        }

        // Read the JSON file
        byte[] fileBytes = Files.readAllBytes(filePath);
        String requestBody = new String(fileBytes);

        Log.info("Reading JSON from: " + jsonFilePath);
        
        HTTPMethods httpMethods = new HTTPMethods(properties);
        Scanner scanner = new Scanner(System.in);

        // Get user input for name and job
        System.out.println("Please enter the name value:");
        String nameValue = scanner.next();
        requestBody = JsonReplacement.readAndReplace(requestBody, "name", nameValue);

        System.out.println("Please enter the job value:");
        String jobValue = scanner.next();
        requestBody = JsonReplacement.readAndReplace(requestBody, "job", jobValue);

        Log.info("Request Body after replacements: " + requestBody);

        // Make the POST request
        Response resObj = httpMethods.createUsersbyPost(requestBody, "QA_URI_Reqres");

        Log.info("Response from server: " + resObj.asPrettyString());

        // Parse the response to get the ID
        returnIdValue = JsonParsing.doParsing(resObj, "id");

        Log.info("Captured ID from response: " + returnIdValue);

        // Assertions to verify the response
        Assert.assertNotNull(returnIdValue, "ID value is null.");
        Assert.assertEquals(JsonParsing.doParsing(resObj, "name"), nameValue, "Name value does not match.");
        Assert.assertEquals(JsonParsing.doParsing(resObj, "job"), jobValue, "Job value does not match.");

        Log.info("Test Case: TC3_ReqResPostUsingUserInput completed");
    }
}
